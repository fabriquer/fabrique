#
# Fabrique build description for Fabrique.
#

print('Configuring Fabrique vX.Y.Z');  # TODO: Git? shell commands?

which = import('which');

debug = args.debug ? true;
asserts = args.asserts ? true;
withtests = args.tests ? true;

colour_output = args.colour_output ? true;
verbose_tests = args.verbose_tests ? false;

platform = import('platform');

cc = import('share/c.fab', platform = platform);
cxx = import('share/cxx.fab', platform = platform);

shell = import('share/shell.fab').shell;


#
# C++ compilation flags:
#
cxxoptions = [ '-std=c++14' ];

dbgflags =
	(if debug [ '-g' '-O0' ] else [ '-O2' ])
	+ (if asserts [ '' ] else [ '-D NDEBUG' ])
	;

includes = foreach dir <- [ srcroot srcroot :: 'include' ] '-I ' + dir.fullname;

# Treat vendor headers as system headers (disable warnings).
vendor_dir = file('vendor');
vendor_flags = cc.system_headers([ vendor_dir vendor_dir::'antlr-cxx-runtime' ]);

common_cxx_flags = cxxoptions + dbgflags + includes + vendor_flags;

warnings = [
	# Use lots and lots of warnings.
	'-Weverything'

	# We really really don't care about C++98 compatibility.
	'-Wno-c++98-compat' '-Wno-c++98-compat-pedantic'

	# We aren't attempting to preserve an ABI. At least not yet.
	'-Wno-padded'

	# We are OK with C99 variable-length arrays.
	'-Wno-vla' '-Wno-vla-extension'
];

cxx_flags = common_cxx_flags + warnings;
generated_cxx_flags = common_cxx_flags + [ '-Wno-deprecated-register' ];

ldflags =
	(if debug [ '-g' '-O0' ] else [ '-O2' ])
	+ (if platform.posix ['-rdynamic'] else [])
	;


cxx_srcs =
	import('bin').sources
	+ import('lib').sources
	+ import('Support').sources
	;

generated_srcs =
	import('vendor/antlr-cxx-runtime').sources
	+ import('vendor/generated-grammar').sources
	;

objects = cxx.compile(cxx_srcs, cxx_flags)
	+ cxx.compile(generated_srcs, generated_cxx_flags);


plugins = foreach lib <- import('base-plugins', cxxflags=cxx_flags, ldflags=ldflags).libs
	shell.copy(lib, 'lib' :: 'fabrique' :: file(lib.filename))
	;

fab = cxx.link_executable(objects, executable = file('fab', subdir = 'bin'),
                          flags = ldflags);

everything = [ fab ] + plugins + import('tests/manifest.fab').all_files;

test = if withtests {
	lit = import('share/lit.fab', show_failure_details = verbose_tests,
	             lit = args.lit ? import('which').executable('lit'));

	[ lit.run(fab, file('tests'), file('junit.xml'), dependencies = everything) ]
} else {
	[]
};
