#
# Fabrique build description for Fabrique.
#

# The `pretty` argument controls coloured compiler output and other aesthetic niceness
# (if supported by the chosen compiler)
pretty:bool = args.pretty ? true;

# We default to Clang, but can use GCC is explicitly requested.
use_gcc:bool = args.gcc ? false;

if pretty
{
	print('Configuring Fabrique with arguments:');
	print(args)
}
else   # TODO: maybe we should allow else-less `if` expressions?
{
	[]
};

# Default to "release" build behaviour, which includes link-time optimization.
# LTO is, however, separable from the debug and release parts: it's possible to
# compile with debug information, release levels of optimization and still choose
# to use or ignore LTO.
debug:bool = args.debug ? false;
release:bool = args.release ? not debug;
lto:bool = release or (args.lto ? false);


#
# Directories containing vendored (including generated) code:
#
vendor = file('vendor');
antlr = vendor :: 'antlr-cxx-runtime';
grammar = vendor :: 'generated-grammar';


#
# C++ toolchain and compilation flags:
#
cxx =
	if (use_gcc)
	{
		import('share/toolchains/c/gcc.fab', colour_diagnostics=pretty, lto=lto)
	}
	else
	{
		import('share/toolchains/c/clang.fab', colour_diagnostics=pretty, lto=lto)
	}
	;

cxx_options = record
{
	debug = debug;
	optlevel = (if debug 0 else 2);
	pic = true;
	standard = 'c++14';

	include_dirs = [srcroot srcroot :: 'include'];
	system_include_dirs = [vendor antlr];

	# Use lots and lots of warnings, but ignore things like C++98 compatibility,
	# problems with C++11 copy elision and warnings that the current compiler
	# version doesn't understand.
	warnings =
		if use_gcc ['all']
		else
		[
			'everything'
			'no-c++98-compat' 'no-c++98-compat-pedantic' 'no-padded'
			'no-vla' 'no-vla-extension'
			'no-return-std-move-in-c++11'
			'no-unknown-warning-option'
		]
		;
};

binary_options = record
{
	debug = debug;
	dynamic = true;
};


# Import `share` directory to ensure that its installation rules run.
share_dir = import('share');


#
# Object files, shared libraries and fab binary:
#

generated_sources =
	import(antlr.name).sources
	+ import(grammar.name).sources
	;

library_objects =
	cxx.compile(import('lib').sources, cxx_options)
	+ cxx.compile(generated_sources, cxx_options, extra_flags=['-Wno-everything'])
	;

library = cxx.library(library_objects, 'fabrique',
	subdir = file('lib'),
	options = record { shared_library = true; });

binary_objects = cxx.compile(import('bin').sources, cxx_options);

# Link library objects into `fab` binary statically for three reasons:
#
# 1. it makes for simpler bootstrapping when we don't have to find libraries
#    or require them to be installed in particular places,
# 2. this provides us with the opportunity for link-time optimization and
# 3. the binary is so small as to be almost trivial.
fab = cxx.binary(
	objects = binary_objects + library_objects,
	binary = file('fab', subdir = 'bin'),
	options = binary_options);

plugins = import('base-plugins',
	cxx_options=cxx_options,
	target_dir=file('lib') :: 'fabrique',
	toolchain = record { compile=cxx.compile; library=cxx.library; },
);


#
# The "everything" target includes fab, its plugins and its test sources.
#
# This is useful for building all the things and double-checking that all of the test
# sources exist without actually running the tests.
#
everything = fab :: plugins.libs + import('tests/manifest.fab').all_files;


#
# Unless `-D tests=false` is specified explicitly, all tests will be executed whenever
# the fab binary, plugins or test sources have changed.
#
# Allow `-D verbose_tests=true` to enable lit's verbose ("show failure details") mode.
#
test = if (args.tests ? true) {
	which = import('which');

	filecheck:file = args.filecheck ? which.executable('FileCheck');
	lit_binary:file = args.lit ? which.executable('lit');
	verbose_tests:bool = args.verbose_tests ? false;

	lit = import('share/lit.fab',
		filecheck = filecheck,
		lit = lit_binary,
		show_failure_details = verbose_tests
	);

	[ lit.run(fab, file('tests'), file('junit.xml'), dependencies = everything) ]
} else {
	[]
};
