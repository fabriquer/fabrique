#
# Fabrique build description for Fabrique.
#

which = import('which');

debug = args.debug ? true;
asserts = args.asserts ? true;
debug_and_asserts = debug and asserts;

withtests = args.tests ? true;

compiler = args.compiler ? 'c++';

colour_output = args.colour_output ? true;
verbose_tests = args.verbose_tests ? false;

platform = import('share/platform.fab');

cxx = import('share/cxx.fab',
	compiler = which.executable(compiler),
	colour_diagnostics = colour_output,
	platform = platform);

lex = import('share/lex.fab');

# TODO: let modules "pass through" values from other modules
shell =
	if platform.posix import('share/shell-posix.fab')
	else import('share/shell-unimplemented.fab')
	;

yacc = import('share/yacc.fab', yacc = which.executable('byacc'));



#
# C++ compilation flags:
#
cxxoptions = [ '-std=c++11' ];

pegmatite_debug_flags = [ '-D' 'DEBUG_AST_CONSTRUCTION' '-D' 'DEBUG_PARSING' ];

dbgflags =
	if debug [ '-g' '-ggdb' '-O0' ] + pegmatite_debug_flags else [ '-O2' ]
	+ if asserts [ '' ] else [ '-D NDEBUG' ]
	;

defines =
	[ '-D' 'USE_RTTI' ]

	+ (if platform.posix [ '-D OS_POSIX' ] else [])
	+ (if platform.darwin [ '-D OS_DARWIN' ] else [])
	+ (if platform.windows [ '-D OS_WINDOWS' ] else [])
	;

includes = foreach dir <- [ srcroot buildroot ] '-I ' + dir;

# Treat vendor headers as system headers (disable warnings).
vendor_flags = [ '-isystem ' + srcroot + '/vendor' ];

common_cxx_flags = cxxoptions + defines + dbgflags + includes + vendor_flags;

warnings = [
	# Use lots and lots of warnings.
	'-Weverything'

	# We intentionally hide yyFlexLexer::yylex().
	'-Wno-overloaded-virtual'

	# We really really don't care about C++98 compatibility.
	'-Wno-c++98-compat' '-Wno-c++98-compat-pedantic'

	# We aren't attempting to preserve an ABI. At least not yet.
	'-Wno-padded'
];

cxx_flags = common_cxx_flags + warnings;
generated_cxx_flags =
	common_cxx_flags + [ '-Wno-deprecated-register' ]
	+ if debug [ '-D' 'YYDEBUG' ] else [];
vendor_cxx_flags = common_cxx_flags;


#
# TODO: allow 'for module in [ ast backends dag ]
# (or even better, foreach dir in [ 'AST' 'Backend' ... ]
#   {
#     module = import(dir + '/' + dir + '.fab');
#     module.sources
#   }
#
cxx_srcs =
	files(driver.cc)
	+ import('AST').sources
	+ import('Backend').sources
	+ import('DAG').sources
	+ import('Parsing').sources
	+ import('Plugin').sources
	+ import('Support').sources
	+ import('Types').sources
	+ import('vendor', cxxflags = vendor_cxx_flags).sources
	;


parser_src = yacc.process(file('Parsing/fab.yy'), subdir, 'Parsing/fab.yacc');
lexer_src = lex.process(
	src = file('Parsing/fab.lxx'), gen = file('Parsing/fab.lex.cc'),
	flags = [ '-c++'], header_out = file('Parsing/fab.lex.h')
);

objects =
	cxx.compile([ lexer_src ], generated_cxx_flags, deps = [ parser_src ])
	+ cxx.compile([ parser_src ], generated_cxx_flags)
	+ cxx.compile(cxx_srcs, cxx_flags)
	;

plugins = foreach lib <- import('base-plugins').libs
	shell.copy(lib, file('lib/fabrique') + '/' + lib.filename)
	;

fab = cxx.link_executable(objects, executable = file('fab', subdir = 'bin'));

everything = [ fab ] + plugins + import('tests/manifest.fab').all_files;

test = if withtests {
	lit = import('share/llvm-lit.fab', show_failure_details = verbose_tests,
	             lit = args.lit ? import('which').executable('llvm-lit'));
	[ lit.run(file('tests'), file('junit.xml'), dependencies = everything) ]
} else {
	[]
};
