#
# Fabrique build description for Fabrique.
#


# TODO: allow these to be set/overridden on the command line, config file...
debug:bool = true;
asserts:bool = true;
debug_and_asserts = debug and asserts;

CXX = 'c++';
LEX = 'flex';
YACC = 'byacc';


# TODO: once include works, extract these into a tools.fab or somesuch

### Compile one C++ source file into an object file.
compile_cxx = action('${CXX} -c ${flags} -MMD -MF ${depfile} ${src} -o ${obj}',
             description = 'Compiling ${in}'
	     <- src:file[in], obj:file[out], flags:list[string], depfile:file[out],
	        otherDeps:list[file[in]] = []);

# TODO: default arg
cxx = function(srcs:list[file], flags:list[string],
               deps:list[file[in]] = []): list[file]
{
	foreach src <- srcs {
		obj = src + '.o';
		outs = compile_cxx(src, obj, flags, obj + '.d', deps);
		obj
	}
};

raw_lex = action('${LEX} ${flags} --header-file=${header} --outfile=${gen} ${src}',
                 description = 'Processing ${in}'
                 <- src:file[in], gen:file[out], header:file[out],
                    flags:list[string] = []);

lex = function(src:file, gen:file, header_out:file, flags:list[string] = []): file
{
	lex = raw_lex(src, gen, header_out, flags);
	gen
};

# Yacc's command-line arguments are confusing and don't expose information like
# the name of the generated header file, so we wrap it in a function that does.
raw_yacc = action('${YACC} -d -t -o ${gen} ${src}',
                  description = 'Processing ${in}'
                  <- src:file[in], gen:file[out], header:file[out]);

yacc = function(src:file, outname:string): file
{
	parser = file(outname + '.cc');
	header = file(outname + '.h');
	gen = raw_yacc(src, gen = parser, header = header);

	parser
};

link_binary = action('${CXX} -o ${binary} ${objects}',
                     description = 'Linking ${binary}'
                     <- objects:list[file[in]], binary:file[out]);


#
# C++ compilation flags:
#
cxxoptions = [ '-std=c++11' ];

dbgflags =
	if debug [ '-g' '-ggdb' ]
	else [ '-D NDEBUG' ]
	;

includes = foreach dir <- [ srcroot buildroot ] '-I ' + dir;

# Treat vendor headers as system headers (disable warnings).
vendor = [ '-isystem ' + srcroot + '/vendor' ];

common_cxx_flags = cxxoptions + dbgflags + includes + vendor;

warnings = [
	# Use lots and lots of warnings.
	'-Weverything'

	# We intentionally hide yyFlexLexer::yylex().
	'-Wno-overloaded-virtual'

	# We really really don't care about C++98 compatibility.
	'-Wno-c++98-compat' '-Wno-c++98-compat-pedantic'

	# We aren't attempting to preserve an ABI. At least not yet.
	'-Wno-padded'
];

normal_cxx_flags = common_cxx_flags + warnings;
generated_cxx_flags =
	common_cxx_flags + [ '-Wno-deprecated-register' ]
	+ if debug [ '-D' 'YYDEBUG' ] else [];


cxx_srcs =
	files(driver.cc FabContext.cc)
	+
	files(
		Action.cc Argument.cc ASTDump.cc BinaryOperation.cc
		Call.cc Callable.cc CompoundExpr.cc Conditional.cc
		Expression.cc Filename.cc FileList.cc
		Foreach.cc Function.cc Identifier.cc
		List.cc Mapping.cc Node.cc Parameter.cc
		Scope.cc SymbolReference.cc UnaryOperation.cc
		Value.cc Visitor.cc
		literals.cc
		,
		subdir = 'AST')
	+
	files(
		Backend.cc Dot.cc Make.cc Ninja.cc Null.cc
		,
		subdir = 'Backend'
	)
	+
	files(
		Build.cc DAG.cc File.cc Formatter.cc
		List.cc Primitive.cc Rule.cc Target.cc
		UndefinedValueException.cc Value.cc Visitor.cc
		,
		subdir = 'DAG'
	)
	+
	files(
		Lexer.cc Parser.cc Token.cc
		,
		subdir = 'Parsing')
	+
	files(
		Arguments.cc Bytestream.cc ErrorReport.cc Join.cc
		Printable.cc SourceLocation.cc Visitable.cc
		exceptions.cc file('os-posix.cc')
		,
		subdir = 'Support'
	)
	+
	files(
		BooleanType.cc FileType.cc FunctionType.cc IntegerType.cc
		OptionallyTyped.cc SequenceType.cc StringType.cc
		Type.cc TypeError.cc Typed.cc
		,
		subdir = 'Types'
	)
	;


lexer = lex(file('Parsing/fab.l'), gen = file('Parsing/fab.lex.cc'),
            flags = [ '-c++'], header_out = file('Parsing/fab.lex.h'));

parser = yacc(file('Parsing/fab.yy'), 'Parsing/fab.yacc');
gen = cxx([ lexer ], flags = generated_cxx_flags, deps = [ parser ])
	+ cxx([ parser ], flags = generated_cxx_flags);
objs = gen + cxx(cxx_srcs, normal_cxx_flags);

fab = link_binary(objs, binary = file('fab'));
