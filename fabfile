#
# Fabrique build description for Fabrique.
#


# TODO: allow these to be set/overridden on the command line, config file...
debug:bool = true;
asserts:bool = true;
debug_and_asserts = debug and asserts;


# TODO: pass parameters to modules?
CXX = 'c++';
cxx = import('share/fabrique/cxx.fab');

LEX = 'flex';
lex = import('share/fabrique/lex.fab');

YACC = 'byacc';
yacc = import('share/fabrique/yacc.fab');



#
# C++ compilation flags:
#
cxxoptions = [ '-std=c++11' ];

dbgflags =
	if debug [ '-g' '-ggdb' ]
	else [ '-D NDEBUG' ]
	;

includes = foreach dir <- [ srcroot buildroot ] '-I ' + dir;

# Treat vendor headers as system headers (disable warnings).
vendor = [ '-isystem ' + srcroot + '/vendor' ];

common_cxx_flags = cxxoptions + dbgflags + includes + vendor;

warnings = [
	# Use lots and lots of warnings.
	'-Weverything'

	# We intentionally hide yyFlexLexer::yylex().
	'-Wno-overloaded-virtual'

	# We really really don't care about C++98 compatibility.
	'-Wno-c++98-compat' '-Wno-c++98-compat-pedantic'

	# We aren't attempting to preserve an ABI. At least not yet.
	'-Wno-padded'
];

normal_cxx_flags = common_cxx_flags + warnings;
generated_cxx_flags =
	common_cxx_flags + [ '-Wno-deprecated-register' ]
	+ if debug [ '-D' 'YYDEBUG' ] else [];


# TODO: allow import('AST/AST.fab').sources;
ast = import('AST/AST.fab');
backends = import('Backend/Backend.fab');
dag = import('DAG/DAG.fab');
parsing = import('Parsing/Parsing.fab');
support = import('Support/Support.fab');
types = import('Types/Types.fab');

plugins = import('plugins/plugins.fab');

#
# TODO: allow 'for module in [ ast backends dag ]
# (or even better, foreach dir in [ 'AST' 'Backend' ... ]
#   {
#     module = import(dir + '/' + dir + '.fab');
#     module.sources
#   }
#
cxx_srcs =
	files(driver.cc FabContext.cc)
	+ ast.sources
	+ backends.sources
	+ dag.sources
	+ parsing.sources
	+ support.sources
	+ types.sources
	;


parser_src = yacc.process(file('Parsing/fab.yy'), 'Parsing/fab.yacc');
lexer_src = lex.process(
	src = file('Parsing/fab.l'), gen = file('Parsing/fab.lex.cc'),
	flags = [ '-c++'], header_out = file('Parsing/fab.lex.h')
);

objects =
	cxx.compile([ lexer_src ], generated_cxx_flags, deps = [ parser_src ])
	+ cxx.compile([ parser_src ], generated_cxx_flags)
	+ cxx.compile(cxx_srcs, normal_cxx_flags)
	;

fab = cxx.link_executable(objects, executable = file('fab'));
