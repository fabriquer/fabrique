#
# Fabrique build description for Fabrique.
#


debug = args.debug ? true;
asserts = args.asserts ? true;
debug_and_asserts = debug and asserts;

colour_output = args.colour_output ? true;
verbose_tests = args.verbose_tests ? false;

cxx = import('share/cxx.fab', colour_diagnostics = colour_output);
lex = import('share/lex.fab');
lit = import('share/llvm-lit.fab', show_failure_details = verbose_tests);

# TODO: find the right yacc once we have a working 'which' plugin
yacc = import('share/yacc.fab', yacc = file('/usr/local/bin/byacc'));



#
# C++ compilation flags:
#
cxxoptions = [ '-std=c++11' ];

dbgflags =
	if debug [ '-g' '-ggdb' '-O0' ] else [ '-O2' ]
	+ if asserts [ '' ] else [ '-D NDEBUG' ]
	;

includes = foreach dir <- [ srcroot buildroot ] '-I ' + dir;

# Treat vendor headers as system headers (disable warnings).
vendor = [ '-isystem ' + srcroot + '/vendor' ];

common_cxx_flags = cxxoptions + dbgflags + includes + vendor;

warnings = [
	# Use lots and lots of warnings.
	'-Weverything'

	# We intentionally hide yyFlexLexer::yylex().
	'-Wno-overloaded-virtual'

	# We really really don't care about C++98 compatibility.
	'-Wno-c++98-compat' '-Wno-c++98-compat-pedantic'

	# We aren't attempting to preserve an ABI. At least not yet.
	'-Wno-padded'
];

normal_cxx_flags = common_cxx_flags + warnings;
generated_cxx_flags =
	common_cxx_flags + [ '-Wno-deprecated-register' ]
	+ if debug [ '-D' 'YYDEBUG' ] else [];


#
# TODO: allow 'for module in [ ast backends dag ]
# (or even better, foreach dir in [ 'AST' 'Backend' ... ]
#   {
#     module = import(dir + '/' + dir + '.fab');
#     module.sources
#   }
#
cxx_srcs =
	files(driver.cc)
	+ import('AST/AST.fab').sources
	+ import('Backend/Backend.fab').sources
	+ import('DAG/DAG.fab').sources
	+ import('Parsing/Parsing.fab').sources
	+ import('Support/Support.fab').sources
	+ import('Types/Types.fab').sources
	;


parser_src = yacc.process(file('Parsing/fab.yy'), subdir, 'Parsing/fab.yacc');
lexer_src = lex.process(
	src = file('Parsing/fab.l'), gen = file('Parsing/fab.lex.cc'),
	flags = [ '-c++'], header_out = file('Parsing/fab.lex.h')
);

objects =
	cxx.compile([ lexer_src ], generated_cxx_flags, deps = [ parser_src ])
	+ cxx.compile([ parser_src ], generated_cxx_flags)
	+ cxx.compile(cxx_srcs, normal_cxx_flags)
	;

fab_executable = cxx.link_executable(objects, executable = file('fab'));

test = lit.run(file('test'), file('lit-test-results'), 'report.txt',
	dependencies = [ fab_executable ] + import('test/manifest.fab').all_files);
