#
# Describe how to run lit, the LLVM Integrated Tester (which can, in fact,
# be used independently of LLVM despite the name).
#

#
# Find the lit binary, as well as the FileCheck binary it's always used with:
#
which = import('which');

filecheck = args.filecheck ? which.executable('FileCheck');
lit = args.lit ? which.executable('lit');


#
# Run lit, putting it in Ninja's 'console' pool to provide unbuffered
# console access. This has no effect on other backends.
#
run = function(fab:file, test_tree:file[in], results_file:file[out],
               dependencies:list[file[in]] = [],
               suppress_success_output:bool = false, show_failure_details:bool = true)
               : file
{
	flags = [
			'-D fab=' + fab.fullname
			'-D FileCheck=' + filecheck.fullname
		]
		+ (if suppress_success_output [ '--quiet' ] else [ '--succinct' ])
		+ (if show_failure_details [ '--verbose' ] else [])
		;

	run_lit(test_tree, results_file, flags, dependencies)
};

# Low-level rule to actually run lit
run_lit = action(
	'${lit} ${flags} --xunit-xml-output=${results} ${tree}',
	description = 'Running LLVM Integrated Tester on ${tree}', pool = 'console'
	<- tree:file[in], results:file[out],
	   flags:list[string] = [], dependencies:list[file[in]] = [],
	   lit:file[in] = lit);
