#
# RUN: %fab --parse-only --print-ast %s > %t
# RUN: FileCheck %s -input-file %t
#

# CHECK: foo = function(ints:list[int]): list[int]
# CHECK-NEXT: {
# CHECK-NEXT:   local_var = 42;
# CHECK-NEXT:   foreach x <= ints
# CHECK-NEXT:   {
# CHECK-NEXT:     y = x + local_var;
# CHECK-NEXT:     y + 1
# CHECK-NEXT:   }
# CHECK-NEXT: }
foo = function(ints:list[int]): list[int]
{
	local_var = 42;

	foreach x <= ints
	{
		y = x + local_var;
		y + 1
	}
};

# CHECK: bar:(list[string])=>list[file] = function(names:list[string]): list[file]
# CHECK-NEXT:   foreach name <= names
# CHECK-NEXT:     file(name)
bar:(list[string])=>list[file] = function(names:list[string]): list[file]
	foreach name <= names
		file(name);

# CHECK: baz:(int)=>int = function(x:int): int
# CHECK:   x + 1
baz:(int)=>int = function(x:int): int x + 1;


# CHECK: wibble:()=>()=>int = function(): ()=>int
# CHECK:   function(): int
# CHECK:     42
wibble:()=>()=>int = function(): ()=>int
{
	function(): int
	{
		42
	}
};

# CHECK: wobble = wibble();
wobble = wibble();


#
# Functions should act as closures:
#

# CHECK: makeClosure:(int)=>(int)=>int = function(x:int)
# CHECK:   function(y:int)
# CHECK:     x + y
makeClosure:(int)=>(int)=>int = function(x:int)
{
	function(y:int)
		x + y
};

# CHECK: theClosure:(int)=>int = makeClosure(4);
theClosure:(int)=>int = makeClosure(4);

# CHECK: closed:int = theClosure(1);
closed:int = theClosure(1);
