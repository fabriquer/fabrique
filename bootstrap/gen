#!/usr/bin/env python3
#
# Copyright (c) 2014-2016, 2018-2019 Jonathan Anderson
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
# ("CTSRD"), as part of the DARPA CRASH research programme and at Memorial University
# of Newfoundland under the NSERC Discovery program (RGPIN-2015-06048).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
import argparse
import itertools
import pipes
import platform
import os
import sys

args = argparse.ArgumentParser()
args.add_argument('builddir', nargs='?', default='.')
args.add_argument('--debug', action='store_true')
args.add_argument('--force-clang', action='store_true')
args.add_argument('--force-gcc', action='store_true')
args.add_argument('-f', '--format', default='ninja')
args = args.parse_args()

bootstrap_script = os.path.realpath(sys.argv[0])
builddir = os.path.realpath(args.builddir)
src_root = os.path.dirname(os.path.dirname(bootstrap_script))

if not os.path.exists(builddir):
    os.makedirs(builddir)

if not os.path.isdir(builddir):
    sys.write(f'--builddir "{builddir}" is not a directory\n')
    sys.exit(1)


if args.format == 'make':
    from make import MakeBuild
    build = MakeBuild(src_root)
elif args.format == 'ninja':
    from ninja import NinjaBuild
    build = NinjaBuild(src_root)
else:
    sys.stderr.write(f'Invalid output format: {args.format}\n')
    sys.exit(1)


# Choose the compiler:
if args.force_clang and args.force_gcc:
    sys.stderr.write('Cannot use --force-clang with --force-gcc\n')
    sys.exit(1)

if args.force_clang:
    build.compiler('clang++')

elif args.force_gcc:
    build.compiler('g++')


import sources
build.add_sources(*sources.cxx_srcs)

# Reconstruct the command used to execute this file, but slightly more
# explicitly (e.g., with more quotes and absolute paths)
regen_args = [pipes.quote(builddir)]
if args.debug:
    regen_args.append('--debug')

build.add_regeneration(pipes.quote(bootstrap_script), regen_args)

system = platform.system()

if system in ['Darwin', 'FreeBSD', 'Linux']:
    build.define('OS_POSIX')

    build.dir('bin', 'bin/')
    build.dir('lib', 'lib/fabrique/')
    build.prefix('lib', 'lib')

    build.add_sources(
        'lib/platform/posix/PosixError.cc',
        'lib/platform/posix/PosixSharedLibrary.cc',
        'lib/platform/posix/files.cc',
    )

    if system == 'Darwin':
        build.add_ldflags('-undefined', 'dynamic_lookup')
        build.suffix('lib', '.dylib')
    else:
        build.add_ldflags('-rdynamic')
        build.suffix('lib', '.so')

elif system == 'Windows':
    build.define('OS_WINDOWS')
    build.suffix('exe', '.exe')
    build.suffix('lib', '.dll')

else:
    raise ValueError(f'Unknown platform: {system}')

if system == 'Darwin':
    build.define('OS_DARWIN')

build.include(src_root,
              builddir,
              f'{src_root}/include',
              f'{src_root}/vendor',
              f'{src_root}/vendor/antlr-cxx-runtime',
              )

build.add_cxxflags('-std=c++14', '-fPIC')

# Disable all warnings in bootstrap (rather than trying to be selective about
# warnings in our code vs vendor code, etc.)
build.add_cxxflags('-w')

if args.debug:
    build.add_cxxflags('-g', '-ggdb', '-O0')
    build.add_ldflags('-g', '-ggdb')

else:
    build.add_cxxflags('-D NDEBUG', '-O2')

build.add_library('platform', 'base-plugins/PlatformTests.cc')
build.add_library('which', 'base-plugins/Which.cc')

build.write(builddir)
