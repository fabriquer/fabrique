#!/usr/bin/env python3
#
# Copyright (c) 2019 Jonathan Anderson
#
# This software was developed by SRI International and the University of
# Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
# ("CTSRD"), as part of the DARPA CRASH research programme and at Memorial University
# of Newfoundland under the NSERC Discovery program (RGPIN-2015-06048).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#
import itertools
import os

from build import BootstrapBuild


class MakeBuild(BootstrapBuild):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def build(self, output, inputs, command=None):
        decl = f'{output} : {inputs}'
        defn = f'''
	mkdir -p {os.path.dirname(output)}
	{command}
''' if command else ''

        return f'{decl}\n{defn}\n'

    def build_object(self, src, obj):
        src = os.path.join(self.dirs['src'], src)
        depflags = f'-MMD -MT {obj} -MF {obj}.d'
        return self.build(obj, src,
                          f'${{cxx}} -c ${{cxxflags}} {depflags} {src} -o {obj}')

    def write(self, builddir):
        out = open(os.path.join(builddir, 'Makefile'), 'w')
        out.write('# POSIX Make file generated by Fabrique bootstrap tool\n\n')

        # Describe tools using make variables
        for (name, tool) in self.tools.items():
            out.write(f'{name} = {tool}\n')

        out.write(f'cxxflags = {" ".join(self.all_cxxflags())}\n')
        out.write('\n')

        # TODO: regeneration?
        if self.regen:
            import sys
            sys.stderr.write(
                "WARNING: 'make' bootstrap does not support regeneration\n")

        # Finally, describe what to build
        objs = [(src, src+'.o') for src in self.sources]
        all_objs = ' '.join((o[1] for o in objs))

        # The main executable
        binary = self.dirs['bin'] + 'fab' + self.suffixes['exe']
        all_targets = ' '.join([binary] + [l[0] for l in self.libraries])

        out.write(self.build('all', all_targets, ''))
        out.write(self.build('fab', binary))
        out.write(self.build(binary, all_objs,
                             f'${{cxx}} ${{cxxflags}} -o {binary} {all_objs}'))

        # Object files built as part of the main executable
        src_root = self.dirs['src']

        for src, obj in objs:
            out.write(self.build_object(src, obj))

        # Libraries that aren't part of the main executable
        for (name, sources) in self.libraries:
            library_objs = [(src, src+'.o') for src in sources]
            objs = ' '.join((o[1] for o in library_objs))

            out.write(self.build(name, objs, f'${{cxx}} -shared {objs} -o {name}'))

            for src, obj in library_objs:
                out.write(self.build_object(src, obj))
