/** @file Make.cc    Definition of @ref MakeBackend. */
/*
 * Copyright (c) 2014 Jonathan Anderson
 * All rights reserved.
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
 * ("CTSRD"), as part of the DARPA CRASH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "Backend/Make.h"

#include "DAG/Build.h"
#include "DAG/DAG.h"
#include "DAG/File.h"
#include "DAG/List.h"
#include "DAG/Primitive.h"
#include "DAG/Rule.h"

#include "Support/Bytestream.h"
#include "Support/Join.h"

using namespace fabrique::backend;
using namespace fabrique::dag;

using std::dynamic_pointer_cast;
using std::shared_ptr;
using std::string;
using std::vector;

namespace fabrique
{
static bool replace(string& s, const string& pattern, const string&);
static bool replace(string& s, const string& pattern, const Build::FileVec&);
}



MakeBackend* MakeBackend::Create()
{
	return new MakeBackend;
}


MakeBackend::MakeBackend()
	: indent("\t")
{
}


static string stringify(const shared_ptr<Value>& v)
{
	assert(v);

	if (auto list = dynamic_pointer_cast<List>(v))
	{
		vector<string> substrings;
		for (auto& v : *list)
			substrings.push_back(stringify(v));

		return fabrique::join(substrings, " ");
	}

	return v->str();
}


void MakeBackend::Process(const dag::DAG& d, Bytestream& out)
{
	//
	// Extract variables and build steps.
	//
	typedef std::pair<string,shared_ptr<Value>> NamedValue;

	StringMap<shared_ptr<Build>> builds;
	StringMap<string> variables;

	for (auto& i : d)
	{
		string name = i.first;
		const shared_ptr<Value>& v = i.second;
		assert(v);

		if (auto build = dynamic_pointer_cast<Build>(v))
			builds[name] = build;

		// Don't do anything with rules.
		else if (auto rule = dynamic_pointer_cast<Rule>(i.second))
			continue;

		else
			variables[name] = stringify(v);
	}


	//
	// Now write out the file:
	//

	// Header comment:
	out
		<< Bytestream::Comment
		<< "#\n"
		<< "# Makefile generated by Fabrique\n"
		<< "#\n"
		<< "\n"
		;


	// Variables:
	out
		<< "#\n"
		<< "# Varables:\n"
		<< "#\n"
		<< Bytestream::Reset
		;

	for (auto& i : variables)
	{
		out
			<< Bytestream::Definition << i.first
			<< Bytestream::Operator << "=" << indent
			<< Bytestream::Literal << i.second
			<< Bytestream::Reset
			<< "\n"
			;
	}


	// Build steps:
	out
		<< "\n"
		<< Bytestream::Comment
		<< "#\n"
		<< "# Build steps:\n"
		<< "#\n"
		<< Bytestream::Reset
		;

	StringMap<string> pseudoTargets;
	size_t buildID = 0;
	for (auto& i : builds)
	{
		const dag::Build& build = *i.second;
		const dag::Rule& rule = build.buildRule();

		//
		// If the build generates multiple outputs, we need to define
		// a pseudo-target that points to all outputs.
		//

		Build::FileVec outputs = build.allOutputs();
		if (not outputs.empty())
		{
			const string pseudoName =
				rule.name() + "_" + std::to_string(buildID);

			out
				<< Bytestream::Definition << pseudoName
				<< Bytestream::Operator << " :"
				;

			for (const shared_ptr<File>& f : outputs)
			{
				pseudoTargets[f->filename()] = pseudoName;
				out << " " << *f;
			}

			out << "\n";
		}

		//
		// target1 target2 : input1 input2 | dependency1 dependency 2
		//
		out << Bytestream::Definition;

		for (const shared_ptr<File>& f : outputs)
			out << f->filename() << " ";

		out
			<< Bytestream::Operator << ":"
			<< Bytestream::Literal
			;

		for (const shared_ptr<File>& f : build.explicitInputs())
			out << " " << f->filename();

		if (build.dependencies().size() > 0)
		{
			out << " |";
			for (const shared_ptr<File>& f : build.explicitInputs())
				out << " " << *f;
		}


		//
		// Build the command to be run (substitute $variables).
		//
		string command = rule.command();
		for (auto& i : build.arguments())
		{
			const string name = i.first;
			const Value& v = *i.second;

			replace(command, "$" + name, v.str());
		}
		replace(command, "$in", build.explicitInputs());
		replace(command, "$out", build.outputs());

		out
			<< "\n"
			<< indent << Bytestream::Action << command
			<< "\n"
			;

		out << "\n";
	}
}


static bool fabrique::replace(string& haystack, const string& needle,
                              const string& replacement)
{
	size_t i = haystack.find(needle);
	if (i == string::npos)
		return false;

	haystack.replace(i, needle.length(), replacement);
	return true;
}

static bool fabrique::replace(string& haystack, const string& pattern,
                              const Build::FileVec& files)
{
	std::ostringstream oss;

	for (const shared_ptr<File>& f : files)
		oss << f->filename() << " ";

	string replacement = oss.str();
	replacement = replacement.substr(0, replacement.length() - 1);

	return replace(haystack, pattern, replacement);
}
