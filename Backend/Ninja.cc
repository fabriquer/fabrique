/** @file Ninja.cc    Definition of @ref NinjaBackend. */
/*
 * Copyright (c) 2013 Jonathan Anderson
 * All rights reserved.
 *
 * This software was developed by SRI International and the University of
 * Cambridge Computer Laboratory under DARPA/AFRL contract (FA8750-10-C-0237)
 * ("CTSRD"), as part of the DARPA CRASH research programme.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "Backend/Ninja.h"
#include "DAG/DAG.h"
#include "Support/Bytestream.h"

using namespace fabrique::backend;
using std::string;


NinjaBackend* NinjaBackend::Create(Bytestream& out)
{
	return new NinjaBackend(out);
}


NinjaBackend::NinjaBackend(Bytestream& out)
	: out(out), indent("    ")
{
}


void NinjaBackend::Process(const dag::DAG& d)
{
	out
		<< "#\n"
		<< "# Ninja file generated by Fabrique\n"
		<< "#\n"
		<< "\n"
		;

	for (auto& i : d.variables())
	{
		out
			<< i.first
			<< " = "
			<< i.second
			<< "\n"
			;
	}

	out << "\n";

	for (auto& i : d.rules())
	{
		const dag::Rule& rule = *i.second;

		out << "rule " << i.first << "\n";
		out << "  command = " << rule.command() << "\n";
		out << "  description = " << rule.description() << "\n";

		for (auto& p : rule.parameters())
			out << "  " << p.first << " = " << p.second << "\n";

		out << "\n";
	}
}
